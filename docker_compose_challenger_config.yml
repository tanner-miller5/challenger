version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: challenger-postgres-prod
    environment:
      POSTGRES_DB: challenger_db
      POSTGRES_USER: challenger_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - challenger-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U challenger_user -d challenger_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: challenger-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://challenger_user:${POSTGRES_PASSWORD}@postgres:5432/challenger_db
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      PORT: 5000
      UPLOAD_DIR: /app/uploads/
      MAX_FILE_SIZE: 52428800
    ports:
      - "5000:5000"
    volumes:
      - uploads_data_prod:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - challenger-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_UPLOAD_URL: ${REACT_APP_UPLOAD_URL}
    container_name: challenger-frontend-prod
    ports:
      - "80:80"
    networks:
      - challenger-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
  uploads_data_prod:

networks:
  challenger-network-prod:
    driver: bridge
